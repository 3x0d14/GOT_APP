################################################################################
# Entry point of the Shiny app
#
# Author: Stefan Schliebs
# Created: 2019-01-22 09:42:17
################################################################################
# import libraries
library(shiny)
library(dplyr)
library(glue)
library(highcharter)
library(sparkline)
library(lubridate)
library(purrr)
library(visNetwork)
library(shinyWidgets)
library(shinycssloaders)
library(httr)
library(future)
library(promises)
plan(multiprocess)
# Global constants --------------------------------------------------------
S3_DATA_PACKAGE <- "https://s3.amazonaws.com/cran-explorer/data.zip"
S3_PKG_DEPENDENCIES <- "https://s3.amazonaws.com/cran-explorer/pkg_dependencies.csv"
S3_PKG_RELEASES <- "https://s3.amazonaws.com/cran-explorer/pkg_releases.csv"
S3_TILE_SUMMARIES <- "https://s3.amazonaws.com/cran-explorer/tile_summary.rds"
# Load modules and utils --------------------------------------------------
# load utilities
source("utils/ui-utils.R")
# load modules
source("modules/mod_pretty_value_box.R")
source("modules/mod_graph_network.R")
source("modules/mod_package_chart.R")
source("modules/mod_featured_packages.R")
source("modules/mod_icon_box.R")
# import libraries
library(shiny)
library(dplyr)
library(glue)
library(highcharter)
library(sparkline)
library(lubridate)
library(purrr)
library(visNetwork)
library(shinyWidgets)
library(shinycssloaders)
library(httr)
library(future)
library(promises)
plan(multiprocess)
S3_DATA_PACKAGE <- "https://s3.amazonaws.com/cran-explorer/data.zip"
S3_PKG_DEPENDENCIES <- "https://s3.amazonaws.com/cran-explorer/pkg_dependencies.csv"
S3_PKG_RELEASES <- "https://s3.amazonaws.com/cran-explorer/pkg_releases.csv"
S3_TILE_SUMMARIES <- "https://s3.amazonaws.com/cran-explorer/tile_summary.rds"
################################################################################
# UI of the app
#
# Author: Stefan Schliebs
# Created: 2019-01-22 09:44:46
################################################################################
htmlTemplate(
filename = "www/index.html",
box_packages_new_month = pretty_value_box_ui("packages-new-month", icon_name = "cubes"),
box_packages_updated_month = pretty_value_box_ui("packages-updated-month", background_color = "#7ab885", icon_name = "cubes"),
box_packages_new_year = pretty_value_box_ui("packages-new-year", icon_name = "cubes"),
box_packages_updated_year = pretty_value_box_ui("packages-updated-year", background_color = "#7ab885", icon_name = "cubes"),
header_ui = uiOutput("header_ui") %>% withSpinner(size = 0.5, proxy.height = "50px", type = 6, color = "#FFFFFF"),
package_chart = package_chart_ui("package_chart"),
featured_packages = featured_packages_ui("featured_packages"),
dependency_network = graph_network_ui("dependency_network")
)
################################################################################
# UI of the app
#
# Author: Stefan Schliebs
# Created: 2019-01-22 09:44:46
################################################################################
htmlTemplate(
filename = "C:/Users/rimox/Downloads/cran-explorer-master/app/www/index.html",
box_packages_new_month = pretty_value_box_ui("packages-new-month", icon_name = "cubes"),
box_packages_updated_month = pretty_value_box_ui("packages-updated-month", background_color = "#7ab885", icon_name = "cubes"),
box_packages_new_year = pretty_value_box_ui("packages-new-year", icon_name = "cubes"),
box_packages_updated_year = pretty_value_box_ui("packages-updated-year", background_color = "#7ab885", icon_name = "cubes"),
header_ui = uiOutput("header_ui") %>% withSpinner(size = 0.5, proxy.height = "50px", type = 6, color = "#FFFFFF"),
package_chart = package_chart_ui("package_chart"),
featured_packages = featured_packages_ui("featured_packages"),
dependency_network = graph_network_ui("dependency_network")
)
################################################################################
# Server logic of the app
#
# Author: Stefan Schliebs
# Created: 2019-01-22 09:44:28
################################################################################
server <- function(input, output, session) {
# load namespace from session
ns <- session$ns
# Data reactives ----------------------------------------------------------
# download data package from AWS and unpack zip file into app directory,
# all other data reactives load their data from the contents of this zip file
data_package <- reactive({
cat("Downloading data package from", S3_DATA_PACKAGE, "\n")
future({
download.file(S3_DATA_PACKAGE, "data.zip")
unzip("data.zip")
})
})
d_pkg_dependencies <- reactive({
req(value(data_package()))
readr::read_csv("data/pkg_dependencies.csv")
})
d_pkg_releases <- reactive({
req(value(data_package()))
readr::read_csv("data/pkg_releases.csv")
})
d_pkg_details <- reactive({
req(value(data_package()))
readRDS("data/pkg_details.rds")
})
l_tile_summary <- reactive({
req(value(data_package()))
readRDS("data/tile_summary.rds")
})
# Summary tiles -----------------------------------------------------------
# render UI of the summary tiles
# NOTE: the reason for this cumbersome way is to get the withSpinner() into the UI
output$header_ui <- renderUI({
tags$p(
icon_box_ui(ns("n_cran_packages"), title = "packages", icon = "glyphicon-gift"),
icon_box_ui(ns("last_update"), title = "data updated", icon = "glyphicon-time")
)
})
m_cran_packages <- callModule(icon_box, id = "n_cran_packages", "loading...")
m_last_update <- callModule(icon_box, id = "last_update", "loading...")
observeEvent(d_pkg_releases(), {
m_cran_packages$set_value(n_distinct(d_pkg_releases()$package) %>% format(big.mark = ","))
m_last_update$set_value(max(d_pkg_releases()$published, na.rm = TRUE) %>% strftime("%d %b %Y"))
})
# CRAN stats info boxes ---------------------------------------------------
# define the info boxes as instances of the pretty_value_box module
m_pkgs_new_month <- callModule(pretty_value_box, id = "packages-new-month")
m_pkgs_updated_month <- callModule(pretty_value_box, id = "packages-updated-month")
m_pkgs_new_year <- callModule(pretty_value_box, id = "packages-new-year")
m_pkgs_updated_year <- callModule(pretty_value_box, id = "packages-updated-year")
# populate the info boxes when new tile data become available
observeEvent(l_tile_summary(), {
map2(
list(m_pkgs_new_month, m_pkgs_updated_month, m_pkgs_new_year, m_pkgs_updated_year),
l_tile_summary(),
function(mod, values) {
do.call(mod$set_values, values)
}
)
})
# Dependency network ------------------------------------------------------
callModule(graph_network, "dependency_network", d_pkg_dependencies, d_pkg_details, d_pkg_releases)
# Package chart -----------------------------------------------------------
callModule(package_chart, "package_chart", d_pkg_releases)
# Featured packages -------------------------------------------------------
callModule(featured_packages, "featured_packages", d_pkg_releases, d_pkg_dependencies, d_pkg_details)
}
htmlTemplate(
filename = "C:/Users/rimox/Downloads/cran-explorer-master/app/www/index.html",
box_packages_new_month = pretty_value_box_ui("packages-new-month", icon_name = "cubes"),
box_packages_updated_month = pretty_value_box_ui("packages-updated-month", background_color = "#7ab885", icon_name = "cubes"),
box_packages_new_year = pretty_value_box_ui("packages-new-year", icon_name = "cubes"),
box_packages_updated_year = pretty_value_box_ui("packages-updated-year", background_color = "#7ab885", icon_name = "cubes"),
header_ui = uiOutput("header_ui") %>% withSpinner(size = 0.5, proxy.height = "50px", type = 6, color = "#FFFFFF"),
package_chart = package_chart_ui("package_chart"),
featured_packages = featured_packages_ui("featured_packages"),
dependency_network = graph_network_ui("dependency_network")
)
################################################################################
# UI of the app
#
# Author: Stefan Schliebs
# Created: 2019-01-22 09:44:46
################################################################################
htmlTemplate(
filename = "C:/Users/rimox/Downloads/cran-explorer-master/app/www/index.html",
box_packages_new_month = pretty_value_box_ui("packages-new-month", icon_name = "cubes"),
box_packages_updated_month = pretty_value_box_ui("packages-updated-month", background_color = "#7ab885", icon_name = "cubes"),
box_packages_new_year = pretty_value_box_ui("packages-new-year", icon_name = "cubes"),
box_packages_updated_year = pretty_value_box_ui("packages-updated-year", background_color = "#7ab885", icon_name = "cubes"),
header_ui = uiOutput("header_ui") %>% withSpinner(size = 0.5, proxy.height = "50px", type = 6, color = "#FFFFFF"),
package_chart = package_chart_ui("package_chart"),
featured_packages = featured_packages_ui("featured_packages"),
dependency_network = graph_network_ui("dependency_network")
)
runApp('C:/Users/rimox/Downloads/cran-explorer-master/app')
runApp('C:/Users/rimox/Downloads/cran-explorer-master/app')
library(shiny); runApp('C:/Users/rimox/Desktop/ECC S9/visualisation/got_shinyapp1/ProjetR.R')
library(shiny); runApp('ProjetR.R')
library(shiny); runApp('ProjetR.R')
killedby
char
char <-read.csv(file='./data/characters.csv')
char$killedBy
char$killedBy[char$killedBy.is.na]
char$killedBy[is.na(char$killedBy)]
char$killedBy[is.na(char$killedBy)] <- "Nobody"
char$killedBy
runApp('ProjetR.R')
char
runApp('ProjetR.R')
char[1]
char$killedBy[1]
char$killedBy[1] <- paste("killed by","zbi")
char$killedBy[1]
runApp('ProjetR.R')
!true
TRUE
!True
!TRUE
runApp('ProjetR.R')
char$killedBy[1]
char$killedBy[1] <- paste(char$killedBy[1],"tbon")
char$killedBy[1]
runApp('ProjetR.R')
runApp('ProjetR.R')
library(shiny); runApp('ProjetR.R')
library(shiny); runApp('ProjetR.R')
runApp('C:/Users/afafe/Desktop/3A/Visualisation des données/TP1/got-master/got-master/data/shiny')
runApp('C:/Users/afafe/Desktop/3A/Visualisation des données/GOT R-Shiny App/ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
library(readr)
scenes <- read_csv("C:/Users/afafe/Desktop/3A/Visualisation des données/GOT R-Shiny App/data/scenes.csv")
View(scenes)
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
library(readr)
appearances <- read_csv("C:/Users/afafe/Desktop/3A/Visualisation des données/GOT R-Shiny App/data/appearances.csv")
View(appearances)
library(readr)
episodes <- read_csv("C:/Users/afafe/Desktop/3A/Visualisation des données/GOT R-Shiny App/data/episodes.csv")
View(episodes)
library(readr)
populations <- read_csv("C:/Users/afafe/Desktop/3A/Visualisation des données/GOT R-Shiny App/data/populations.csv")
View(populations)
library(readr)
populations <- read_csv("C:/Users/afafe/Desktop/3A/Visualisation des données/GOT R-Shiny App/data/populations.csv")
View(populations)
runApp('ProjetR.R')
populations$name
lands.geojson["features"][0]
lands.geojson$features
result <- fromJSON(file = "lands.geojson.json")
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
loc_time=appearances %>% filter(name %in% main_char) %>% left_join(scenes) %>% group_by(location,name) %>% summarize(duration=sum(duration,na.rm=TRUE))
main_char= c("Jon Snow", "Tyrion Lannister","Daenerys Targaryen","Sansa Stark","Cersei Lannister","Arya Stark")
loc_time=appearances %>% filter(name %in% main_char) %>% left_join(scenes) %>% group_by(location,name) %>% summarize(duration=sum(duration,na.rm=TRUE))
View(loc_time)
View(loc_time)
loc_time_mc = scenes_locations %>% left_join(loc_time)
scenes_locations= scenes %>% summarise(location,sceneId)
loc_time_mc = scenes_locations %>% left_join(loc_time)
View(loc_time_mc)
View(loc_time_mc)
runApp('ProjetR.R')
runApp('C:/Users/afafe/Desktop/3A/Visualisation des données/TP1/got-master/got-master/data/shiny')
runApp('C:/Users/afafe/Desktop/3A/Visualisation des données/TP1/got-master/got-master/data/shiny')
View(loc_time)
View(loc_time)
View(scenes_locations)
View(scenes_locations)
View(scenes_locations)
View(scenes_locations)
main_char= c("Jon Snow", "Tyrion Lannister","Daenerys Targaryen","Sansa Stark","Cersei Lannister","Arya Stark")
loc_time=appearances %>% filter(name %in% main_char) %>% left_join(scenes) %>% group_by(location,name) %>% summarize(duration=sum(duration,na.rm=TRUE))
loc_time_epis = loc_time %>% left_join(scenes %>% select(sceneId,episodeId))
main_char= c("Jon Snow", "Tyrion Lannister","Daenerys Targaryen","Sansa Stark","Cersei Lannister","Arya Stark")
loc_time=appearances %>% filter(name %in% main_char) %>% left_join(scenes) %>% group_by(location,name) %>% summarize(duration=sum(duration,na.rm=TRUE))
loc_time_epis = loc_time %>% left_join(scenes %>% select(sceneId,episodeId))
loc_time_mc = scenes_locations %>% left_join(loc_time)
loc_time_epis = loc_time %>% left_join(scenes %>% select(sceneId,episodeId))
loc_time_epis = loc_time_mc %>% left_join(scenes %>% select(sceneId,episodeId))
loc_time_epis = loc_time_mc %>% left_join(scenes %>% select(sceneId,episodeId))
View(loc_time_epis)
View(loc_time_epis)
View(char)
View(char)
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('C:/Users/afafe/Desktop/3A/Visualisation des données/TP1/got-master/got-master/data/shiny')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
library(shiny); runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('C:/Users/rimox/Desktop/ECC S9/visualisation/got-master/got_shinyapp')
appearences %>% left_join(scenes) %>% filter(name == "jhon snow") %>% filter(episodeId == 4) %>% group_by(location) %>% summarise(duration = sum(duration))
appearences %>% left_join(scenes) %>% filter(name == "jon snow") %>% filter(episodeId == 4) %>% group_by(location) %>% summarise(duration = sum(duration))
runApp('C:/Users/rimox/Desktop/ECC S9/visualisation/D3_folded_charts-master')
runApp('ProjetR.R')
library(shiny); runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
runApp('ProjetR.R')
library(shiny); runApp('ProjetR.R')
library(shiny); runApp('ProjetR.R')
runApp('ProjetR.R')
